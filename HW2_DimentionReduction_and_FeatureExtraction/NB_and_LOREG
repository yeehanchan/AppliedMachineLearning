{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab inline\n",
    "import rlcompleter, readline\n",
    "readline.parse_and_bind('tab: complete')\n",
    "import numpy as np\n",
    "from matplotlib import pylab as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(20,)\n",
      "(39774,)\n",
      "(6714,)\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "os.getcwd()\n",
    "os.chdir(\"../Desktop/ModernAnalytics/assignment2\")\n",
    "with open(\"train.json\") as f:\n",
    "    obj = np.asarray(json.load(f))\n",
    "cuisine, ID, ingredients= [],[],[]\n",
    "for each in obj:\n",
    "    cuisine.append(each['cuisine'])\n",
    "    ID.append(each['id'])\n",
    "    ingredients.extend(each['ingredients'])\n",
    "#    component.append(each['ingredients'])\n",
    "cuisine = np.asarray(cuisine)\n",
    "ID = np.asarray(ID,dtype='int')\n",
    "#ingredients = np.asarray(ingredients)\n",
    "unique_ingredients = np.unique(ingredients)\n",
    "#print(ingredients.shape)\n",
    "print(np.unique(cuisine).shape)\n",
    "print(ID.shape)\n",
    "print(unique_ingredients.shape)\n",
    "#print(unique_ingredients)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(39774, 6714)\n"
     ]
    }
   ],
   "source": [
    "#train = np.zeros([obj.shape[0],unique_ingredients.shape[0]])\n",
    "#print(np.sum(train))\n",
    "#for i,each in enumerate(obj):\n",
    "#    indexs = np.searchsorted(unique_ingredients,each['ingredients'],side = 'left')\n",
    "#    for x in each['ingredients']:\n",
    "#        if(x not in unique_ingredients):\n",
    "#            print(x)\n",
    "#    train[i][indexs] = 1\n",
    "#print(np.sum(train))\n",
    "#print(len(ingredients))\n",
    "def readMatrix(a):\n",
    "#    outcome = np.zeros([a.shape[0],unique_ingredients.shape[0]])\n",
    "    outcome = []\n",
    "    for i,each in enumerate(a):\n",
    "        outcome.append(np.in1d(unique_ingredients,each['ingredients']))\n",
    "    return np.asarray(outcome)\n",
    "train = readMatrix(obj)\n",
    "print(train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "428249\n"
     ]
    }
   ],
   "source": [
    "print(np.sum(train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "train = np.asarray(train,dtype='int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#ingredients_test = []\n",
    "with open(\"test.json\") as f:\n",
    "    obj_test = np.asarray(json.load(f))\n",
    "#    for each in obj_test:\n",
    "#        ingredients_test.extend(each['ingredients'])\n",
    "#unique_ingredients_test = np.unique(ingredients_test)\n",
    "#test = np.zeros([obj_test.shape[0],unique_ingredients_test.shape[0]])\n",
    "#for i,each in enumerate(obj_test):\n",
    "#    indexs = np.searchsorted(unique_ingredients_test,each['ingredients'])\n",
    "#    test[i][indexs] = 1\n",
    "test = np.asarray(readMatrix(obj_test),dtype='int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9944, 6714)\n"
     ]
    }
   ],
   "source": [
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.68353698395937046"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "gnb = GaussianNB()\n",
    "bnb = BernoulliNB()\n",
    "def Validation_3fold(n_train,n_label,method):\n",
    "    s,e = 0,len(n_train)//3\n",
    "    accuracy = 0\n",
    "    for i in range(0,3):\n",
    "        ts = n_train[s:e]\n",
    "        ts_label = n_label[s:e]\n",
    "        tn = np.delete(n_train,np.arange(s,e),axis = 0)\n",
    "        tn_label = np.delete(n_label,np.arange(s,e))\n",
    "        method.fit(tn,tn_label)\n",
    "        accuracy += method.score(ts,ts_label)\n",
    "        s = e\n",
    "        e +=len(n_train)//3\n",
    "#        print(s)\n",
    "#        print(e)\n",
    "    return accuracy/3\n",
    "Validation_3fold(train,cuisine,bnb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.38238547795041988"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Validation_3fold(train,cuisine,gnb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.77555689646502746"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()\n",
    "Validation_3fold(train,cuisine,lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "lr.fit(train,cuisine)\n",
    "result = lr.predict(test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9944,)\n"
     ]
    }
   ],
   "source": [
    "print(result.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import csv\n",
    "with open(\"logistic_output\",'wb') as f:\n",
    "    writer = csv.writer(f)\n",
    "    writer.writerow(['id','cuisine'])\n",
    "    for i in range(0,obj_test.shape[0]):\n",
    "        writer.writerow([obj_test[i]['id'],result[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "gnb.fit(train,cuisine)\n",
    "gnb_outcome = gnb.predict(test)\n",
    "with open(\"gnb_output\",'wb') as f:\n",
    "    writer = csv.writer(f)\n",
    "    writer.writerow(['id','cuisine'])\n",
    "    for i in range(0,obj_test.shape[0]):\n",
    "        writer.writerow([obj_test[i]['id'],gnb_outcome[i]])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "bnb.fit(train,cuisine)\n",
    "bnb_outcome = bnb.predict(test)\n",
    "with open(\"bnb_output\",'wb') as f:\n",
    "    writer = csv.writer(f)\n",
    "    writer.writerow(['id','cuisine'])\n",
    "    for i in range(0,obj_test.shape[0]):\n",
    "        writer.writerow([obj_test[i]['id'],bnb_outcome[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
